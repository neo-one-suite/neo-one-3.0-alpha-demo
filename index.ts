import { NEOONEDataProvider } from '@neo-one/client-core';
import { disassembleByteCode } from '@neo-one/node-core';

const rpcURL = 'http://testnet.neotracker.io/rpc';
const provider = new NEOONEDataProvider({
  network: 'test',
  rpcURL,
});

// Get data from a block
provider.getBlock(4317225).then((block) => {
  block.transactions
    .filter(({ type }) => type !== 'MinerTransaction')
    .forEach((trans) => {
      console.log((trans as any).receipt);
    });
});

// Copy/paste a contract's bytecode invocation data to get the OpCodes
const opcodes1 = disassembleByteCode(
  Buffer.from(
    '000000004da101e8a2abe68190e683a7e5928ce8b4aae5a9aae7bb9fe6b2bbe79d80e79a84e5a4a7e99986e4b88aefbc8ce69c89e4b880e4b8aae796afe78b82e79a84e59bbde5baa6e38082e5b9b4e88081e79a84e59bbde78e8be6b2a1e69c89e7bba7e689bfe4babaefbc8ce4b8bae4ba86e7a1aee5ae9ae4b88be4b880e4bbbbe59bbde78e8be79a84e4babae98089efbc8ce4bb96e586b3e5ae9ae69c80e5908ee796afe78b82e4b880e68a8ae38082e4bb96e68a8ae887aae5b7b1e79a84e9ad94e6b395e78e8be586a0e694bee59ca8e4ba86e78e8be59bbde4b8ade5bf83e79a84e59f8ee5a0a1e9878cefbc8ce8aea9e4bb96e79a84e9a286e4b8bbe4bbace58ebbe68aa2e5a4baefbc8ce8b081e5be97e588b0e78e8be586a0e79a84e8aea4e58fafefbc8ce8b081e5b0b1e698afe696b0e4b880e4bbbbe59bbde78e8befbc8ce5b9b6e88eb7e5be97e59bbde5ba93e69c80e5a4a7e79a84e8b4a2e5af8ce38082e4ba8ee698afefbc8ce59b9be4bd8de9a286e4b8bbe4b88ee4bb96e4bbace79a84e99984e5bab8e4bbace4ba89e58588e68190e5908ee59cb0e587bae58f91e4ba860001050207104d5a045cc56b6c766b00527ac46c766b51527ac4616c766b00c303626574876c766b52527ac46c766b52c3647a00616168184e656f2e426c6f636b636861696e2e47657448656967687451936c766b53527ac46168164e656f2e53746f726167652e476574436f6e74657874096865696768744d6170617c65f6026c766b54527ac46c766b54c3066865696768746c766b53c361527265120361516c766b55527ac462ee006c766b00c303676574876c766b56527ac46c766b56c364ca00616168164e656f2e53746f726167652e476574436f6e74657874096865696768744d6170617c658a026c766b57527ac46c766b57c306686569676874617c6506036c766b58527ac46c766b58c36168174e656f2e426c6f636b636861696e2e476574426c6f636b6168124e656f2e4865616465722e476574486173686c766b59527ac46c766b59c3c001209c009c6c766b5b527ac46c766b5bc3640e00006c766b55527ac4622d006c766b59c361652d006c766b5a527ac46c766b5ac36c766b55527ac4620e00006c766b55527ac46203006c766b55c3616c75665fc56b6c766b00527ac4614f6c766b51527ac4006c766b52527ac4006c766b53527ac4627f01616c766b00c36c766b53c3517f01007e6c766b54527ac46c766b54c360966c766b55527ac46c766b54c360976c766b56527ac46c766b56c359a16c766b57527ac46c766b57c364710061616c766b56c361066e6f7469667952c168124e656f2e52756e74696d652e4e6f74696679616c766b52c351936c766b52527ac46c766b51c34f9c6c766b58527ac46c766b58c36412006c766b56c36c766b51527ac46217006c766b51c36c766b56c35a95936c766b51527ac4616c766b52c3529c6c766b59527ac46c766b59c364060062ca006c766b55c359a16c766b5a527ac46c766b5ac364710061616c766b55c361066e6f7469667952c168124e656f2e52756e74696d652e4e6f74696679616c766b52c351936c766b52527ac46c766b51c34f9c6c766b5b527ac46c766b5bc36412006c766b55c36c766b51527ac46217006c766b51c36c766b55c35a95936c766b51527ac4616c766b52c3539c6c766b5c527ac46c766b5cc3640600622d00616c766b53c351936c766b53527ac46c766b53c36c766b00c3c09f6c766b5d527ac46c766b5dc3636cfe6c766b51c36c766b5e527ac46203006c766b5ec3616c756653c56b6c766b00527ac46c766b51527ac4616152c5766c766b00c3007cc4766c766b51c3517cc46c766b52527ac46203006c766b52c3616c756654c56b6c766b00527ac46c766b51527ac46c766b52527ac4616c766b00c351c301007e6c766b51c37e6c766b53527ac46c766b00c300c36c766b53c36c766b52c3615272680f4e656f2e53746f726167652e50757461616c756654c56b6c766b00527ac46c766b51527ac4616c766b00c351c301007e6c766b51c37e6c766b52527ac46c766b00c300c36c766b52c3617c680f4e656f2e53746f726167652e4765746c766b53527ac46203006c766b53c3616c756668134e656f2e436f6e74726163742e437265617465',
    'hex',
  ),
);
console.log(opcodes1);

const convert = (from: any, to: any) => (str: string) =>
  Buffer.from(str, from).toString(to);
const hexToUtf8 = convert('hex', 'utf8');

// Copy/pase a contract's description bytecode and convert to UTF8 (should be in Mandarin)
console.log(
  hexToUtf8(
    'e8a2abe68190e683a7e5928ce8b4aae5a9aae7bb9fe6b2bbe79d80e79a84e5a4a7e99986e4b88aefbc8ce69c89e4b880e4b8aae796afe78b82e79a84e59bbde5baa6e38082e5b9b4e88081e79a84e59bbde78e8be6b2a1e69c89e7bba7e689bfe4babaefbc8ce4b8bae4ba86e7a1aee5ae9ae4b88be4b880e4bbbbe59bbde78e8be79a84e4babae98089efbc8ce4bb96e586b3e5ae9ae69c80e5908ee796afe78b82e4b880e68a8ae38082e4bb96e68a8ae887aae5b7b1e79a84e9ad94e6b395e78e8be586a0e694bee59ca8e4ba86e78e8be59bbde4b8ade5bf83e79a84e59f8ee5a0a1e9878cefbc8ce8aea9e4bb96e79a84e9a286e4b8bbe4bbace58ebbe68aa2e5a4baefbc8ce8b081e5be97e588b0e78e8be586a0e79a84e8aea4e58fafefbc8ce8b081e5b0b1e698afe696b0e4b880e4bbbbe59bbde78e8befbc8ce5b9b6e88eb7e5be97e59bbde5ba93e69c80e5a4a7e79a84e8b4a2e5af8ce38082e4ba8ee698afefbc8ce59b9be4bd8de9a286e4b8bbe4b88ee4bb96e4bbace79a84e99984e5bab8e4bbace4ba89e58588e68190e5908ee59cb0e587bae58f91e4ba86',
  ),
);
